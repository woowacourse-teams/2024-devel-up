# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: BACKEND_CI

on:
  pull_request:
    types: [ opened, reopened, synchronize ]
    branches: [ 'main' ]
    paths:
      - 'backend/**'

jobs:
  BE_CI:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        run: chmod +x ./backend/gradlew

      - name: Test with Gradle
        continue-on-error: true
        id: gradle_test
        run: |
          cd backend
          ./gradlew test

  BE_SLACK_MESSAGE:
    runs-on: ubuntu-latest
    needs: BE_CI
    if: ${{needs.BE_CI.result != 'skipped'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Get teamMember List
        id: teamMembers
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const workers = JSON.parse(fs.readFileSync('.github/workflows/teamMember.json'));
            const mention = context.payload.pull_request.assignees.map((user) => {
            const login = user.login;
            const mappedValue = workers[login];
            return mappedValue ? `<@${mappedValue}>` : `No mapping found for ${login}`;
            })
            return mention.join(', ');

      - name: Slack mention
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.ISSUE_CHANNEL }}
          payload: |
            {
                "text": "pr 테스트 결과",
                "blocks": [
                  {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "pr 테스트 ${{ needs.BE_CI.result }} \n • 링크: <${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}> \n • pr 담당자: \${{ steps.teamMembers.outputs.result }}
                      }
                  }
                ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
