name: Backend Dev CD

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - backend/**

jobs:
  find_previous_image_version:
    name: 🔎Find Previous Docker Image Version
    runs-on: [ self-hosted, develup-dev ]
    outputs:
      previousImageVersion: ${{steps.find_version.outputs.name}}
    steps:
      - id: find_version
        run: |
          PREVIOUS_IMAGE_NAME=$(docker ps --format "{{.Image}}")
          echo "name=$PREVIOUS_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo $PREVIOUS_IMAGE_NAME

  build:
    name: 🏗️ Build Jar and Upload Docker Image
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SUBMODULE_GITHUB_TOKEN }}

      - name: 🏗️ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21

      - name: 🏗️ Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean bootJar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Image Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_REPOSITORY_NAME }}:${{ github.sha }}
          platforms: linux/arm64

  deploy:
    name: 🚀 Server Deployment
    environment: dev
    needs: build
    runs-on: [ self-hosted, develup-dev ]
    defaults:
      run:
        working-directory: backend

    env:
      BACKEND_APP_IMAGE_NAME: ${{ secrets.DOCKER_REPOSITORY_NAME }}:${{ github.sha }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_ROOT_HOST: ${{ secrets.MYSQL_ROOT_HOST }}
      HOST_NAME: 'DEV_SERVER'

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SUBMODULE_GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Compose up
        run: docker compose -f compose.dev.yml up -d

  health_check:
    name: 🙏 Dev Server Health Check
    needs: deploy
    defaults:
      run:
        working-directory: backend
    runs-on: [ self-hosted, develup-dev ]
    steps:
      - name: ♻️ Send Helth Check Request
        run: chmod u+x ./scripts/dev_healthcheck.sh && ./scripts/dev_healthcheck.sh

  roll-back:
    name: 🚀 Dev Server RollBack
    needs: [ health_check, find_previous_image_version ]
    if: failure()
    runs-on: [ self-hosted, develup-dev ]
    defaults:
      run:
        working-directory: backend

    env:
      BACKEND_APP_IMAGE_NAME: ${{ needs.find_previous_image_version.outputs.previousImageVersion }}

    steps:
      - uses: actions/checkout@v4

      - name: 🐳 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🐳 Docker Compose up
        run: docker compose -f compose.dev.yml up -d

  health_check_after_roll-back:
    name: 🙏 Dev Server Health Check After RollBack
    needs: roll-back
    if: ${{always() && needs.roll-back.result != 'skipped'}}
    defaults:
      run:
        working-directory: backend
    runs-on: [ self-hosted, develup-dev ]
    steps:
      - name: ♻️ Send Helth Check Request
        run: chmod u+x ./scripts/dev_healthcheck.sh && ./scripts/dev_healthcheck.sh

  slack-notify_build_fail:
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    if: ${{failure() && needs.build.result == 'failure'}}
    steps:
      - name: Extract Commit Title
        run: |
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
          echo "COMMIT_TITLE=$COMMIT_TITLE" >> $GITHUB_ENV   

      - name: Build and Deploy Success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.ISSUE_CHANNEL }}
          payload: |
            {
              "text": "Build and Deploy Status",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!channel> \n 📣 Server Build & Deploy 결과를 안내 드립니다. 📣 \n\t • 🚀 Build Fail \n\t • 🔴 Deploy Skip \n\t • 🏷️ 관련 Commit: <${{ github.event.head_commit.url }}|${{ env.COMMIT_TITLE }}>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

  slack-notify_success:
    runs-on: ubuntu-latest
    environment: dev
    needs: health_check
    if: success()
    steps:
      - name: Extract Commit Title
        run: |
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
          echo "COMMIT_TITLE=$COMMIT_TITLE" >> $GITHUB_ENV   

      - name: Build and Deploy Success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.ISSUE_CHANNEL }}
          payload: |
            {
              "text": "Build and Deploy Status",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!channel> \n 📣 Server Build & Deploy 결과를 안내 드립니다. 📣 \n\t • 🚀 Build Success \n\t • 🟢 Deploy Success \n\t • 🏷️ 관련 Commit: <${{ github.event.head_commit.url }}|${{ env.COMMIT_TITLE }}>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

  roll-back_success_notifiy:
    name: 📢Send Dev Server RollBack Success Notification
    runs-on: ubuntu-latest
    needs:
      - health_check_after_roll-back
    if: ${{failure() && needs.health_check_after_roll-back.result == 'success'}}
    steps:
      - name: Extract Commit Title
        run: |
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
          echo "COMMIT_TITLE=$COMMIT_TITLE" >> $GITHUB_ENV

      - name: Build and Deploy Success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.ISSUE_CHANNEL }}
          payload: |
            {
              "text": "Build and Deploy Status",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!channel> \n 📣 Server Build & Deploy 결과를 안내 드립니다. 📣 \n\t • 🚀 Build Success \n\t • 🟠 Server RollBack Success \n\t • 🏷️ 관련 Commit: <${{ github.event.head_commit.url }}|${{ env.COMMIT_TITLE }}>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

  roll-back_fail_notifiy:
    name: 📢Send Dev Server RollBack Fail Notification
    runs-on: ubuntu-latest
    needs:
      - health_check_after_roll-back
    if: ${{failure() && needs.health_check_after_roll-back.result == 'failure'}}
    steps:
      - name: Extract Commit Title
        run: |
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
          echo "COMMIT_TITLE=$COMMIT_TITLE" >> $GITHUB_ENV

      - name: Build and Deploy Success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.ISSUE_CHANNEL }}
          payload: |
            {
              "text": "Build and Deploy Status",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!channel> \n 📣 Server Build & Deploy 결과를 안내 드립니다. 📣 \n\t • 🚀 Build Success \n\t • 🔴Server RollBack Fail \n\t • 🏷️ 관련 Commit: <${{ github.event.head_commit.url }}|${{ env.COMMIT_TITLE }}>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
